openapi: 3.0.3
info:
  title: Mealwhile
  description: ""
  
  contact:
    email: info@jbdevelopment.de
  version: 1.0.0
externalDocs:
  description: Get all information on Mealwhile
  url: https://github.com/JohannesBreitling/MealwhileDocumentation
#servers:
#  - url: 
tags:
  - name: unit
    description: A unit describes an amount of food.
  - name: flag
    description: A flag describes an (chemical / biological) ingredient of a grocery, e. g. an allergy or some sort of dietry
  - name: grocery
    description: A grocery describes some sort of food including the flags that the grocery fulfills
  - name: recipe
    description: A recipe is a collection of ingredients (grocery, unit, amount) and a description and a collection of steps to create some sort of meal

paths:
  # Section for the Units
  /api/v1/unit/:
    # Create new unit
    post:
      operationId: createUnit
      tags:
        - unit
      summary: Create a new unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unitRequest'
      responses:
        '200':
          description: Successful creation of unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
    # Get all units
    get:
      operationId: getUnits
      tags:
        - unit
      summary: Get all units
      responses:
        '200':
          description: Sucessful retrieval of all units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/unit'
    # Update an existing unit
    put:
      operationId: updateUnit
      tags:
        - unit
      summary: Update an existing unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unitRequest'
      responses:
        '200':
          description: Successful update of unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
  /api/v1/unit/{id}:
    # Get a specific unit
    get:
      operationId: getUnit
      tags:
        - unit
      summary: Get one unit with specified id
      parameters:
        - name: id
          in: path
          description: Id of the unit
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful retrieval of the unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unit'
    delete:
      operationId: deleteUnit
      tags:
        - unit
      summary: Delete one unit
      parameters:
        - name: id
          in: path
          description: Id of the unit
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful deletion of the unit
          content:
            application/json:
              schema:
                type: string

  # Section for the Flags
  /api/v1/flag/:
    # Create new flag
    post:
      operationId: createFlag
      tags:
        - flag
      summary: Create a new flag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flagRequest'
      responses:
        '200':
          description: Successful creation of flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flag'
    # Get all flags
    get:
      operationId: getFlags
      tags:
        - flag
      summary: Get all flags
      responses:
        '200':
          description: Sucessful retrieval of all flags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/flag'
    # Update an existing flag
    put:
      operationId: updateFlag
      tags:
        - flag
      summary: Update an existing flag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flagRequest'
      responses:
        '200':
          description: Successful update of flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flag'
  /api/v1/flag/{id}:
    # Get a specific flag
    get:
      operationId: getFlag
      tags:
        - flag
      summary: Get one flag with specified id
      parameters:
        - name: id
          in: path
          description: Id of the flag
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful retrieval of the flag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flag'
    delete:
      operationId: deleteFlag
      tags:
        - flag
      summary: Delete one flag
      parameters:
        - name: id
          in: path
          description: Id of the flag
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful deletion of the flag
          content:
            application/json:
              schema:
                type: string
  
  # Section for the groceries
  /api/v1/grocery/:
    # Create new grocery
    post:
      operationId: createGrocery
      tags:
        - grocery
      summary: Create a new grocery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groceryRequest'
      responses:
        '200':
          description: Successful creation of grocery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grocery'
    # Get all groceries
    get:
      operationId: getGroceries
      tags:
        - grocery
      summary: Get all groceries
      responses:
        '200':
          description: Sucessful retrieval of all groceries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/grocery'
    # Update an existing grocery
    put:
      operationId: updateGrocery
      tags:
        - grocery
      summary: Update an existing grocery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groceryRequest'
      responses:
        '200':
          description: Successful update of grocery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grocery'
  /api/v1/grocery/{id}:
    # Get a specific grocery
    get:
      operationId: getGrocery
      tags:
        - grocery
      summary: Get one grocery with specified id
      parameters:
        - name: id
          in: path
          description: Id of the grocery
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful retrieval of the grocery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grocery'
    delete:
      operationId: deleteGrocery
      tags:
        - grocery
      summary: Delete one grocery
      parameters:
        - name: id
          in: path
          description: Id of the grocery
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sucessful deletion of the grocery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/grocery'
  
  # Section for the recipes
  /api/v1/recipe/:
    # Create new recpie
    post:
      operationId: createRecipe
      tags:
        - recipe
      summary: Create a new recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipeRequest'
      responses:
        '200':
          description: Successful creation of recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
    # Get all recipes
    get:
      operationId: getRecipes
      tags:
        - recipe
      summary: Get all recipes
      responses:
        '200':
          description: Sucessful retrieval of all recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
    # Update an existing recipe
    put:
      operationId: updateRecipe
      tags:
        - recipe
      summary: Update an existing recipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipeRequest'
      responses:
        '200':
          description: Successful update of recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
  /api/v1/recipe/{id}:
    # Get a specific recipe
    get:
      operationId: getRecipe
      tags:
        - recipe
      summary: Get one recipe with specified id
      parameters:
        - name: id
          in: path
          description: Id of the recipe
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful retrieval of the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
    delete:
      operationId: deleteRecipe
      tags:
        - recipe
      summary: Delete one recipe
      parameters:
        - name: id
          in: path
          description: Id of the recipe
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        '200':
          description: Sucessful deletion of the recipe
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    id:
      type: string
      description: Identifier for Mealwhile enitites
      example: PEiCFxjVFvYFCtMM
    unit:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the unit
          example: Gram
        abbreviation:
          type: string
          description: Abbreviation of the unit in recipes
          example: g
    unitRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the unit
          example: Gram
        abbreviation:
          type: string
          description: Abbreviation of the unit in recipes
          example: g
    flag:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the flag
          example: Hazelnut
        description:
          type: string
          description: Description of the respective grocery flag. It can desrcibe allergies or dietries
          example: The grocery contains hazelnuts.
    flagRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the flag
          example: Hazelnut
        description:
          type: string
          description: Description of the respective grocery flag. It can desrcibe allergies or dietries
          example: The grocery contains hazelnuts.
    grocery:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the grocery
          example: Hackfleisch (gemischt)
        flags:
          type: array
          description: The grocery flags contained by the grocery
          items:
            $ref: '#/components/schemas/flag'
    groceryRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Name of the grocery
          example: Hackfleisch (gemischt)
        flags:
          type: array
          description: The grocery flags contained by the grocery
          items:
            $ref: '#/components/schemas/id'
    ingredient:
      type: object
      properties:
        grocery:
          $ref: '#/components/schemas/grocery'
        unit:
          $ref: '#/components/schemas/unit'
        amount:
          type: number
    ingredientRequest:
      type: object
      properties:
        grocery:
          $ref: '#/components/schemas/id'
        unit:
          $ref: '#/components/schemas/id'
        amount:
          type: number
    recipe:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the recipe
          example: Spaghetti Bolognese
        description:
          type: string
          description: The description of the recipe
        steps:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ingredient'
    recipeRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: The name of the recipe
          example: Spaghetti Bolognese
        description:
          type: string
          description: The description of the recipe
        steps:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ingredient'
